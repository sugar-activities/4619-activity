import flask
from flask_classy import FlaskView
from flaskext.babel import gettext as _
#import logging


class SyncView(FlaskView):
    def index(self):
        self.total_comments = flask.g.home_mount.Comments.total
        self.total_resources = flask.g.home_mount.Resources.total
        self.total_solutions = flask.g.home_mount.Solutions.total
        self.report_cursor = flask.g.home_mount.client.Report.cursor()
        self.total_reports = self.report_cursor.total
        if flask.request.args.get('returnto'):
            flask.session['returnto'] = flask.request.args.get('returnto')
        return flask.render_template('synchronize.html',
                    comments_total=self.total_comments,
                    resources_total=self.total_resources,
                    reports_total=self.total_reports,
                    solutions_total=self.total_solutions)

    def process(self):
        new_guids = {}
        flask.g.home_mount.Resources.filter()
        for local_feedback in flask.g.home_mount.Resources:
            feedback = flask.g.network_mount.client.Feedback()
            feedback['content'] = local_feedback['content']
            feedback['title'] = local_feedback['title']
            feedback['context'] = local_feedback['context']
            feedback['type'] = local_feedback['type']
            feedback.post()
            new_guids[local_feedback['guid']] = feedback['guid']

            flask.g.home_mount.client.Feedback.delete(local_feedback['guid'])

        flask.g.network_mount.Questions._reset()
        flask.g.network_mount.Problems._reset()
        flask.g.network_mount.Ideas._reset()
        flask.g.network_mount.Reviews._reset()

        self.report_cursor = flask.g.home_mount.client.Report.cursor(
                reply=['guid', 'context', 'implementation',
                        'description', 'version'])
        for local_report in self.report_cursor:
            report = flask.g.client.Report()
            report['context'] = local_report['context']
            report['implementation'] = local_report['implementation']
            report['description'] = local_report['description']
            report.post()

            flask.g.home_mount.client.Report.delete(local_report['guid'])
        self.report_cursor._reset()

        flask.g.home_mount.Solutions.filter()
        for local_solution in flask.g.home_mount.Solutions:
            solution = flask.g.network_mount.client.Solution()
            solution['content'] = local_solution['content']
            solution['feedback'] = new_guids[local_solution['feedback']]
            solution.post()
            flask.g.home_mount.client.Solution.delete(local_solution['guid'])
        flask.g.network_mount.Solutions._reset()
        flask.g.home_mount.Solutions._reset()

# ONLY FEEDBACK CAN BE SHARED OFFLINE
#        for local_comment in flask.g.home_mount.Comments:
#            comment = flask.g.network_mount.client.Comment()
#            comment['message'] = local_comment['message']
#            comment['parent'] = new_guids[local_comment['parent']]
#            comment['parent_resource'] = local_comment['parent_resource']
#            comment.post()
#            flask.g.network_mount.Comments._reset()
#            flask.g.home_mount.client.Comment.delete(local_comment['guid'])

        return flask.render_template('dialog.html',
                    title='Success',
                    body='''
You've uploaded all resources shared in offline mode.''')

    def all(self):
        return flask.render_template('please_wait.html',
                    process='/sync/process',
                    body=_('Synchronization in progress...'))


class FeedbackView(FlaskView):

    def new(self):
        context_guid = flask.request.args.get('context') or \
                            flask.session.get('last_context') or \
                            'sugar-network'
        return flask.render_template('dialog_resource.html',
                    context=context_guid,
                    mode='new')

    def edit(self):
        context_guid = flask.request.args.get('context')
        title = flask.request.args.get('title')
        content = flask.request.args.get('content')
        resource = flask.request.args.get('resource')
        resource_type = flask.request.args.get('resource_type')
        return flask.render_template('dialog_resource.html',
                    context=context_guid,
                    title=title,
                    content=content,
                    resource=resource,
                    resource_type=resource_type,
                    mode='edit')


class ProjectView(FlaskView):

    def new(self):
        if flask.request.args.get('returnto'):
            flask.session['returnto'] = flask.request.args.get('returnto')
        return flask.render_template('dialog_project.html',
                    mode='new', **flask.request.args)

    def edit(self):
        if flask.request.args.get('returnto'):
            flask.session['returnto'] = flask.request.args.get('returnto')
        return flask.render_template('dialog_project.html',
                    mode='edit', **flask.request.args)


class AboutView(FlaskView):

    def index(self):
        if flask.request.args.get('returnto'):
            flask.session['returnto'] = flask.request.args.get('returnto')
        return flask.render_template('dialog_about.html')


class ReportView(FlaskView):
    route_base = '/_report'

    def index(self):
        return flask.render_template('report-form.html',
                context=flask.request.args.get('context') or '',
                implementation=flask.request.args.get('implementation') or '',
                filename=flask.request.args.get('filename') or '')

    def post(self):
        report = flask.g.client.Report()
        report['context'] = flask.request.form['context']
        report['implementation'] = flask.request.form['implementation']
        report['description'] = flask.request.form['content']
        report.post()

        filename = flask.request.form.get('filename')
        if filename:
            report.upload_blob('data', filename)

        return flask.render_template('dialog.html',
                    title='Success',
                    body='''
Your report has been recorded for review by developers.
Thank you!''')